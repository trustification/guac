package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/guacsec/guac/pkg/assembler/graphql/model"
)

// FindSoftware is the resolver for the findSoftware field.
func (r *queryResolver) FindSoftware(ctx context.Context, searchText string) ([]model.PackageSourceOrArtifact, error) {
	return r.Backend.FindSoftware(ctx, searchText)
}

// FindSoftwareList is the resolver for the findSoftwareList field.
func (r *queryResolver) FindSoftwareList(ctx context.Context, searchText string, after *string, first *int) (*model.FindSoftwareConnection, error) {
	return r.Backend.FindSoftwareList(ctx, searchText, after, first)
}

// FindTopLevelPackagesRelatedToVulnerability is the resolver for the findTopLevelPackagesRelatedToVulnerability field.
func (r *queryResolver) FindTopLevelPackagesRelatedToVulnerability(ctx context.Context, vulnerabilityID string) ([][]model.Node, error) {
	panic(fmt.Errorf("not implemented: FindTopLevelPackagesRelatedToVulnerability - findTopLevelPackagesRelatedToVulnerability"))
}

// FindVulnerability is the resolver for the findVulnerability field.
func (r *queryResolver) FindVulnerability(ctx context.Context, purl string, offset *int, limit *int) ([]model.CertifyVulnOrCertifyVEXStatement, error) {
	return r.Backend.FindVulnerability(ctx, purl, offset, limit)
}

// FindVulnerabilityByCpe is the resolver for the findVulnerabilityByCPE field.
func (r *queryResolver) FindVulnerabilityByCpe(ctx context.Context, cpe string) ([]model.CertifyVulnOrCertifyVEXStatement, error) {
	return r.Backend.FindVulnerabilityCPE(ctx, cpe)
}

// FindVulnerabilityBySbomURI is the resolver for the findVulnerabilityBySbomURI field.
func (r *queryResolver) FindVulnerabilityBySbomURI(ctx context.Context, sbomURI string, offset *int, limit *int) ([]model.CertifyVulnOrCertifyVEXStatement, error) {
	return r.Backend.FindVulnerabilitySbomURI(ctx, sbomURI, offset, limit)
}

// FindDependentProduct is the resolver for the findDependentProduct field.
func (r *queryResolver) FindDependentProduct(ctx context.Context, purl string, offset *int, limit *int) ([]*model.HasSbom, error) {
	return r.Backend.FindDependentProduct(ctx, purl, offset, limit)
}
